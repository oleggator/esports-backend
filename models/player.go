// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Player player
// swagger:model Player

type Player struct {

	// Страна игрока
	Country string `json:"country,omitempty"`

	// Имя игрока
	Fullname string `json:"fullname,omitempty"`

	// Идентификатор игрока
	ID int64 `json:"id,omitempty"`

	// Псевдоним игрока
	// Required: true
	Nickname *string `json:"nickname"`

	// Slug команды
	// Required: true
	Team *string `json:"team"`
}

/* polymorph Player country false */

/* polymorph Player fullname false */

/* polymorph Player id false */

/* polymorph Player nickname false */

/* polymorph Player team false */

// Validate validates this player
func (m *Player) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNickname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Player) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	return nil
}

func (m *Player) validateTeam(formats strfmt.Registry) error {

	if err := validate.Required("team", "body", m.Team); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Player) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Player) UnmarshalBinary(b []byte) error {
	var res Player
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
