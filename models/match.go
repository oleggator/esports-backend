// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Match match
// swagger:model Match

type Match struct {

	// Идентификатор матча
	ID int64 `json:"id,omitempty"`

	// Дата и время начала
	// Required: true
	StartAt *strfmt.DateTime `json:"startAt"`

	// Slug первой команды, учавствующей в матче
	// Required: true
	Team1 *int64 `json:"team1"`

	// Slug второй команды, учавствующей в матче
	// Required: true
	Team2 *int64 `json:"team2"`
}

/* polymorph Match id false */

/* polymorph Match startAt false */

/* polymorph Match team1 false */

/* polymorph Match team2 false */

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeam1(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeam2(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) validateStartAt(formats strfmt.Registry) error {

	if err := validate.Required("startAt", "body", m.StartAt); err != nil {
		return err
	}

	//if err := validate.FormatOf("startAt", "body", "date-time", m.StartAt.String(), formats); err != nil {
	//	return err
	//}

	return nil
}

func (m *Match) validateTeam1(formats strfmt.Registry) error {

	if err := validate.Required("team1", "body", m.Team1); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateTeam2(formats strfmt.Registry) error {

	if err := validate.Required("team2", "body", m.Team2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
