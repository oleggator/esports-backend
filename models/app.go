// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// App Приложение
// swagger:model App

type App struct {

	// Адрес для переадресации
	// Required: true
	CallbackURL *string `json:"callbackUrl"`

	// Идентификатор клиентского приложения
	ClientID string `json:"clientId,omitempty"`

	// Пароль клиентского приложения
	ClientSecret string `json:"clientSecret,omitempty"`

	// Идентификатор приложения
	ID int64 `json:"id,omitempty"`

	// Название приложения
	// Required: true
	Title *string `json:"title"`
}

/* polymorph App callbackUrl false */

/* polymorph App clientId false */

/* polymorph App clientSecret false */

/* polymorph App id false */

/* polymorph App title false */

// Validate validates this app
func (m *App) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *App) validateCallbackURL(formats strfmt.Registry) error {

	if err := validate.Required("callbackUrl", "body", m.CallbackURL); err != nil {
		return err
	}

	return nil
}

func (m *App) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *App) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *App) UnmarshalBinary(b []byte) error {
	var res App
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
